{"name": "test_add[args0]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type date is not JSON serializable", "trace": "self = <test_api.script.test_07purchase_add.Testadd object at 0x16ba40790>\nargs = {'casename': '采购订单', 'data': {'expectArriveDate': datetime.date(2024, 12, 28), 'is_true': True, 'login_password': 123456, 'login_username': '1000@superadmin', ...}}\n\n    @pytest.mark.parametrize('args', readline('/Users/yangayangdemac/pythonProject/SDYERP/test_api/data/purchase_add.yml'))\n    def test_add(self,args):\n        data1=args.get(\"data\",{})\n        scId=data1.get(\"scId\")\n        supplierId=data1.get(\"supplierId\")\n        purchaserId=data1.get(\"purchaserId\")\n        expectArriveDate=data1.get(\"expectArriveDate\")\n        payTypes=data1.get(\"payTypes\")\n        products=data1.get(\"products\")\n        user = data1.get(\"login_username\")\n        pwd = data1.get(\"login_password\")\n        is_true = data1.get(\"is_true\",False)\n        login_data = {\n            \"scId\": scId,\n            \"supplierId\": supplierId,\n            \"purchaserId\": purchaserId,\n            \"expectArriveDate\": expectArriveDate,\n            \"payTypes\": payTypes,\n            \"products\": products,\n        }\n>       rev_add=self.add_api.add(username=user,password=pwd,test_data=login_data)\n\ntest_07purchase_add.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common/business/purchase_add.py:29: in add\n    response = requests.post(url=self.goods_add, headers=self.headers, json=test_data)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/sessions.py:575: in request\n    prep = self.prepare_request(req)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n../../../../Library/Python/3.10/lib/python/site-packages/requests/models.py:370: in prepare\n    self.prepare_body(data, files, json)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/models.py:510: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py:238: in dumps\n    **kw).encode(obj)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x16badce80>\no = datetime.date(2024, 12, 28)\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type date is not JSON serializable\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py:179: TypeError"}, "parameters": [{"name": "args", "value": "{'casename': '采购订单', 'data': {'login_username': '1000@superadmin', 'login_password': 123456, 'scId': 1859802908804124672, 'supplierId': 1861103558770954240, 'purchaserId': 1, 'expectArriveDate': datetime.date(2024, 12, 28), 'payTypes': [{'id': 2, 'payAmount': 264, 'text': '测试'}], 'products': [{'productId': 1861727812411592705, 'purchasePrice': 11, 'purchaseNum': 12, 'description': '测试'}, {'productId': 1861727050776317952, 'purchasePrice': 11, 'purchaseNum': 12, 'description': '测试'}], 'is_true': True}}"}], "start": 1732795709804, "stop": 1732795710115, "uuid": "2a28568f-68ad-43f3-b11e-c83a932bc125", "historyId": "a0bb9f33b18fe987d1da3ef824375fee", "testCaseId": "fce440ec8765538c4d5333a11df61ace", "fullName": "test_api.script.test_07purchase_add.Testadd#test_add", "labels": [{"name": "parentSuite", "value": "test_api.script"}, {"name": "suite", "value": "test_07purchase_add"}, {"name": "subSuite", "value": "Testadd"}, {"name": "host", "value": "yyyyydeMacBook-Pro.local"}, {"name": "thread", "value": "48955-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api.script.test_07purchase_add"}]}