{"name": "test_add[args6]", "status": "broken", "statusDetails": {"message": "TypeError: Object of type date is not JSON serializable", "trace": "self = <test_api.script.test_06retail_add.Testadd object at 0x147e38a90>\nargs = {'casename': '零售出库', 'data': {'login_password': 123456, 'login_username': '1000@superadmin', 'memberId': 1859800952677208064, 'payTypes': [{'id': 2, 'payAmount': 1}], ...}}\n\n    @pytest.mark.parametrize('args', readline('/Users/yangayangdemac/pythonProject/SDYERP/test_api/data/retail_add.yml'))\n    def test_add(self,args):\n        data1=args.get(\"data\",{})\n        scId=data1.get(\"scId\")\n        memberId=data1.get(\"memberId\")\n        salerId=data1.get(\"salerId\")\n        paymentDate=data1.get(\"paymentDate\")\n        payTypes=data1.get(\"payTypes\")\n        products=data1.get(\"products\")\n        user = data1.get(\"login_username\")\n        pwd = data1.get(\"login_password\")\n        # # 随机编号，避免重复\n        # is_random_code=data1.get(\"is_random_code\")\n        # # 随机sku，避免重复\n        # is_random_sku=data1.get(\"is_random_sku\")\n        # #是否为低权限账户\n        # is_low=data1.get(\"is_low\",False)\n        # self.num = randint(0000, 9999999999)\n        # code = self.num if is_random_code else \"\"\n        # skuCode = self.num if is_random_sku else \"\"\n        login_data = {\n            \"scId\": scId,\n            \"memberId\": memberId,\n            \"salerId\": salerId,\n            \"paymentDate\": paymentDate,\n            \"payTypes\": payTypes,\n            \"products\": products,\n    \n        }\n>       rev_add=self.add_api.add(username=user,password=pwd,test_data=login_data)\n\ntest_06retail_add.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../common/business/retail_add.py:28: in add\n    response = requests.post(url=self.goods_add, headers=self.headers, json=test_data)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/api.py:115: in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/api.py:59: in request\n    return session.request(method=method, url=url, **kwargs)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/sessions.py:575: in request\n    prep = self.prepare_request(req)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/sessions.py:484: in prepare_request\n    p.prepare(\n../../../../Library/Python/3.10/lib/python/site-packages/requests/models.py:370: in prepare\n    self.prepare_body(data, files, json)\n../../../../Library/Python/3.10/lib/python/site-packages/requests/models.py:510: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/__init__.py:238: in dumps\n    **kw).encode(obj)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x1500163e0>\no = datetime.date(2024, 12, 28)\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type date is not JSON serializable\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/json/encoder.py:179: TypeError"}, "parameters": [{"name": "args", "value": "{'casename': '零售出库', 'data': {'login_username': '1000@superadmin', 'login_password': 123456, 'scId': 1859802908804124672, 'memberId': 1859800952677208064, 'salerId': 1859793515903586304, 'paymentDate': datetime.date(2024, 12, 28), 'payTypes': [{'id': 2, 'payAmount': 1}], 'products': [{'productId': 1861727812411592705, 'oriPrice': 15, 'taxPrice': 15, 'discountRate': 100.0, 'orderNum': 1}, {'productId': 1861727050776317952, 'oriPrice': 15, 'taxPrice': 15, 'discountRate': 100.0, 'orderNum': 1}]}}"}], "start": 1732781674829, "stop": 1732781675118, "uuid": "472b25be-d74a-4746-b27f-a3f52e03a065", "historyId": "6a3e012cd7f1e9981bdaf1972adfa9ec", "testCaseId": "e7b4e270cb6033eadfee95670a9fa9a6", "fullName": "test_api.script.test_06retail_add.Testadd#test_add", "labels": [{"name": "parentSuite", "value": "test_api.script"}, {"name": "suite", "value": "test_06retail_add"}, {"name": "subSuite", "value": "Testadd"}, {"name": "host", "value": "yyyyydeMacBook-Pro.local"}, {"name": "thread", "value": "44027-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_api.script.test_06retail_add"}]}